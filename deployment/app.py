from fastapi import FastAPI, UploadFile, File
from fastapi.responses import JSONResponse
import numpy as np
from PIL import Image
import tensorflow as tf
import mlflow
import mlflow.tensorflow # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ load_model
import io
import os

app = FastAPI(title="üå¶Ô∏è Weather Classifier API", version="1.0")

# ‚úÖ Path ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á Artifacts ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤
MODEL_PATH = "./model" 
print(f"üì¶ Loading model from local path: {MODEL_PATH}")

if not os.path.exists(MODEL_PATH):
    # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Error message ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    raise FileNotFoundError(f"‚ùå Model path not found at: {MODEL_PATH}")

try:
    # üí° ‡πÉ‡∏ä‡πâ mlflow.tensorflow.load_model() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Artifacts
    # ‡∏ñ‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å Log ‡∏î‡πâ‡∏ß‡∏¢ mlflow.tensorflow.log_model
    model = mlflow.tensorflow.load_model(MODEL_PATH) 
except Exception as e:
    # ‡∏´‡∏≤‡∏Å load ‡∏î‡πâ‡∏ß‡∏¢ MLflow ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á load ‡∏î‡πâ‡∏ß‡∏¢ Keras ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    print(f"‚ö†Ô∏è Failed to load model with MLflow: {e}. Trying Keras load...")
    try:
        # ‡∏´‡∏≤‡∏Å model.keras ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ./model/data/
        model = tf.keras.models.load_model(f"{MODEL_PATH}/data") 
    except Exception as keras_e:
        raise RuntimeError(f"‚ùå Critical Error: Cannot load model via MLflow or Keras. Details: {keras_e}")

CLASS_NAMES = ["cloudy", "foggy", "rainy", "snowy", "sunny"]
IMG_SIZE = (128, 128)

@app.get("/")
def root():
    return {"message": "Weather Classifier API is running üöÄ"}

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    # ... (‡∏™‡πà‡∏ß‡∏ô predict ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    try:
        image_bytes = await file.read()
        image = Image.open(io.BytesIO(image_bytes)).convert("RGB")
        image = image.resize(IMG_SIZE)
        image_array = np.expand_dims(np.array(image) / 255.0, axis=0)

        preds = model.predict(image_array)
        pred_class = CLASS_NAMES[np.argmax(preds)]
        confidence = float(np.max(preds))

        return JSONResponse({
            "predicted_class": pred_class,
            "confidence": round(confidence, 4)
        })

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)