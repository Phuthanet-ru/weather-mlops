# üîπ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Workflow
name: MLOps Pipeline CI/CT/CD

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡∏´‡∏£‡∏∑‡∏≠ pull request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # -------------------- üîπ JOB 1: CI Checks --------------------
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          pip install flake8 pytest pandas

      - name: Lint with flake8
        run: |
          flake8 mlops_pipeline/scripts --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 mlops_pipeline/scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest || (if [ $? -eq 5 ]; then echo "Pytest finished: No tests found."; exit 0; else exit $?; fi)

  # -------------------- üîπ JOB 2: Build, Train, and Deploy --------------------
  build-and-train:
    needs: ci-checks
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          pip install kaggle

      # ‚úÖ ‡πÇ‡∏´‡∏•‡∏î dataset ‡∏à‡∏≤‡∏Å Kaggle
      - name: Download Dataset from Kaggle
        env:
          KAGGLE_JSON: ${{ secrets.KAGGLE_JSON }}
        run: |
          echo "$KAGGLE_JSON" > kaggle.json
          mkdir -p ~/.kaggle
          mv kaggle.json ~/.kaggle/
          chmod 600 ~/.kaggle/kaggle.json
          mkdir -p mlops_pipeline/data
          kaggle datasets download -d ammaralfaifi/5class-weather-status-image-classification -p mlops_pipeline/data --unzip
          echo "‚úÖ Dataset downloaded successfully."

      - name: Fix dataset folder structure
        run: |
          echo "üîß Checking folder structure..."
          if [ -d "mlops_pipeline/data/data" ]; then
            mv mlops_pipeline/data/data/* mlops_pipeline/data/
            rm -rf mlops_pipeline/data/data
          fi
          echo "‚úÖ Dataset structure fixed."

      - name: Check and remove corrupted images
        run: |
          python -m pip install tensorflow pillow
          python mlops_pipeline/scripts/find_corrupted.py

      # ‚úÖ Pipeline steps
      - name: Run Data Validation
        run: python mlops_pipeline/scripts/01_data_validation.py

      - name: Run Data Preprocessing
        id: preprocessing
        run: python mlops_pipeline/scripts/02_preprocessing.py

      - name: Run Model Training, Evaluation, and Registration
        run: python mlops_pipeline/scripts/03_train_model.py
      
      # üí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á MLflow artifacts
      - name: Debug MLflow Artifacts Structure
        run: |
          echo "Current directory contents:"
          ls -a
          echo "---"
          echo "Contents of mlruns folder:"
          ls -R mlruns || (echo "mlruns directory not found or is empty." && exit 1)
          echo "---"
          echo "Attempting flexible find again:"
          find mlruns -type f -path "*/artifacts/*"

      - name: Run Model Full Evaluation
        run: python mlops_pipeline/scripts/04_evaluate_model.py

      # ‚úÖ Copy model artifacts for Docker build
      - name: Copy trained model to deployment folder
        run: |
          echo "üì¶ Searching for latest trained model in MLflow..."
          
          # üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå MLmodel ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á mlruns/models/
          # ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: mlruns/[Experiment ID]/models/[Model ID]/artifacts/MLmodel
          MODEL_PATH=$(find mlruns -type f -path "*/models/*/artifacts/MLmodel" | sort -r | head -1)
          
          if [ -z "$MODEL_PATH" ]; then
            echo "‚ùå Model not found anywhere under mlruns/*/models/*/artifacts/"
            # ‡∏•‡∏ö ls -R mlruns ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á debug ‡πÅ‡∏•‡πâ‡∏ß
            exit 1
          fi
          
          MODEL_DIR=$(dirname "$MODEL_PATH")
          echo "üìÅ Model found at: $MODEL_DIR"
          
          mkdir -p model
          # cp -r ‡∏à‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á MLmodel, conda.yaml, data/ ‡∏Ø‡∏•‡∏Ø)
          cp -r "$MODEL_DIR"/* model/
          echo "‚úÖ Model copied to ./model/"
          ls -R model


      # ‚úÖ Upload artifacts for debugging (optional)
      - name: Upload MLflow artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts
          path: mlruns/

      # -------------------- üîπ Docker Build & Test API --------------------
      - name: Build Docker Image
        run: |
          docker build -t weather-mlops-api .

      - name: Run Docker Container (background)
        run: |
          # üö® ‡πÉ‡∏ä‡πâ Port 8001 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Container
          docker run -d -p 8001:8000 --name weather_api weather-mlops-api
          echo "‚è≥ Waiting for container to start (25s)..."
          sleep 25
          if docker ps | grep weather_api; then
            echo "‚úÖ Docker container started successfully on port 8001."
          else
            echo "üö® Container failed to start. Logs:"
            docker logs weather_api
            exit 1
          fi

      - name: Test API Prediction
        run: |
          IMAGE_PATH="test_assets/1440909480.jpg"
          echo "üß™ Testing API Prediction using ${IMAGE_PATH}..."
          
          # üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
          if [ ! -f "$IMAGE_PATH" ]; then
              echo "üö® ERROR: Test image not found at ${IMAGE_PATH}. Listing current directory contents:"
              ls -R
              exit 1
          fi
          
          # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Health Check
          curl --fail --retry 5 --retry-delay 5 http://127.0.0.1:8001/
          
          # 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Prediction
          curl -X POST -F "file=@${IMAGE_PATH}" http://127.0.0.1:8001/predict
          
          echo "‚úÖ API responded successfully."

      - name: Stop and Remove Docker Container
        if: always()
        run: |
          docker stop weather_api || true
          docker rm weather_api || true
          echo "üßπ Cleaned up container"
