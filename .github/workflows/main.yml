# üîπ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Workflow
name: MLOps Pipeline CI/CT/CD

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡∏´‡∏£‡∏∑‡∏≠ pull request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # -------------------- üîπ JOB 1: CI Checks --------------------
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install CI dependencies
        run: |
          python -m pip install --upgrade pip
          # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î
          pip install -r mlops_pipeline/requirements.txt
          pip install flake8 pytest

      - name: üîé Lint with flake8
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á flake8 ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏±‡πâ‡∏á Deployment ‡πÅ‡∏•‡∏∞ Script
        run: |
          flake8 deployment mlops_pipeline/scripts --count --show-source --statistics
          flake8 deployment mlops_pipeline/scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "‚úÖ Flake8 check passed."

      - name: üß™ Test with pytest
        run: |
          # üö® ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå tests/ ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå test_preprocess.py ‡πÅ‡∏•‡πâ‡∏ß
          pytest || (if [ $? -eq 5 ]; then echo "Pytest finished: No tests found."; exit 0; else exit $?; fi)
          echo "‚úÖ Unit tests passed."

  # -------------------- üîπ JOB 2: Train and Compare Models (CT) --------------------
  train-and-compare:
    needs: ci-checks
    runs-on: ubuntu-latest
    # üí° ‡πÉ‡∏ä‡πâ Strategy Matrix ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    strategy:
      fail-fast: false
      matrix:
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö 3 Runs: LR (0.001, 0.0005, 0.001) ‡πÅ‡∏•‡∏∞ Epochs (10, 10, 20)
        experiment:
          - lr: 0.001
            epochs: 10
            run_name: 'base-config'
          - lr: 0.0005
            epochs: 10
            run_name: 'low-lr'
          - lr: 0.001
            epochs: 20
            run_name: 'high-epochs'
            
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies (Kaggle, ML)
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ML dependencies ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô
          pip install kaggle tensorflow mlflow pillow

      - name: Download Dataset and Fix Structure
        env:
          KAGGLE_JSON: ${{ secrets.KAGGLE_JSON }}
        run: |
          echo "$KAGGLE_JSON" > kaggle.json
          mkdir -p ~/.kaggle
          mv kaggle.json ~/.kaggle/
          chmod 600 ~/.kaggle/kaggle.json
          mkdir -p mlops_pipeline/data
          kaggle datasets download -d ammaralfaifi/5class-weather-status-image-classification -p mlops_pipeline/data --unzip
          
          if [ -d "mlops_pipeline/data/data" ]; then
            mv mlops_pipeline/data/data/* mlops_pipeline/data/
            rm -rf mlops_pipeline/data/data
          fi
          echo "‚úÖ Dataset prepared."

      # üí° ‡∏£‡∏±‡∏ô ML Pipeline ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Matrix
      - name: Run Model Training (Experiment ${{ matrix.experiment.run_name }})
        run: |
          echo "Running Exp: LR=${{ matrix.experiment.lr }}, Epochs=${{ matrix.experiment.epochs }}"
          python mlops_pipeline/scripts/03_train_model.py \
            --lr ${{ matrix.experiment.lr }} \
            --epochs ${{ matrix.experiment.epochs }}
        
      # üí° ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Artifacts (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Job ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
      - name: Upload MLflow Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts-${{ matrix.experiment.run_name }}
          path: mlruns/
          
  # -------------------- üîπ JOB 3: Deploy and Test API (CD) --------------------
  deploy-and-test:
    # üí° ‡∏£‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å Experiment ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡πÉ‡∏ä‡πâ 'always()' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡∏°‡∏µ Exp. ‡πÉ‡∏î Exp. ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
    needs: train-and-compare
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository (for Dockerfile and deployment code)
        uses: actions/checkout@v4
        
      - name: Install dependencies (Pillow, MLflow)
        run: |
          # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MLflow ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ find MLmodel ‡πÑ‡∏î‡πâ
          pip install mlflow

      # 1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Artifacts ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å Runs ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      # (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å register ‡πÑ‡∏î‡πâ)
      - name: Download All MLflow Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .
          
      - name: Consolidate mlruns directory
        run: |
          # üí° MLflow Artifacts ‡∏à‡∏≤‡∏Å Matrix ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ (mlflow-artifacts-*)
          # ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏ß‡∏°‡∏°‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà mlruns/ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ find MLmodel ‡πÄ‡∏à‡∏≠
          mkdir -p mlruns
          for dir in mlflow-artifacts-*; do 
            if [ -d "$dir/mlruns" ]; then
              cp -r $dir/mlruns/* mlruns/
            fi
            rm -rf $dir # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          done
          echo "‚úÖ Consolidated mlruns directory."
          ls mlruns

      # 2. Copy trained model artifacts (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
      - name: Copy latest trained model to deployment folder
        run: |
          echo "üì¶ Searching for latest trained model in MLflow..."
          MODEL_PATH=$(find mlruns -type f -path "*/models/*/artifacts/MLmodel" | sort -r | head -1)
          
          if [ -z "$MODEL_PATH" ]; then
            echo "‚ùå Model not found. Skipping Docker build."
            # ‡πÉ‡∏ô CD Pipeline ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ Exit 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Pipeline ‡πÑ‡∏õ‡∏ï‡πà‡∏≠ (‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå)
            exit 1 
          fi
          
          MODEL_DIR=$(dirname "$MODEL_PATH")
          mkdir -p model
          cp -r "$MODEL_DIR"/* model/
          echo "‚úÖ Model copied to ./model/ from $MODEL_DIR"
          ls -R model

      # 3. Build & Run Docker
      - name: Build Docker Image
        run: docker build -t weather-mlops-api .

      - name: Run Docker Container (background)
        run: |
          docker run -d -p 8001:8000 --name weather_api weather-mlops-api
          echo "‚è≥ Waiting for container to start (25s)..."
          sleep 25
          if docker ps | grep weather_api; then
            echo "‚úÖ Docker container started successfully on port 8001."
          else
            echo "üö® Container failed to start. Logs:"
            docker logs weather_api
            exit 1
          fi

      # 4. Test API
      - name: Test API Prediction
        run: |
          IMAGE_PATH="test_assets/1440909480.jpg" 
          echo "üß™ Testing API Prediction using ${IMAGE_PATH}..."
          
          # üí° Health Check
          curl --fail --retry 5 --retry-delay 5 http://127.0.0.1:8001/
          
          # üí° Prediction Test
          # ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ --fail ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ curl ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ error code ‡∏ñ‡πâ‡∏≤ API ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          curl -X POST -F "file=@${IMAGE_PATH}" http://127.0.0.1:8001/predict --fail 
          
          echo "‚úÖ API responded and prediction test passed."

      - name: Stop and Remove Docker Container
        if: always()
        run: |
          docker stop weather_api || true
          docker rm weather_api || true
          echo "üßπ Cleaned up container"