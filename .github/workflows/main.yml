# 🔹 ชื่อของ Workflow
name: MLOps Pipeline CI/CT/CD

# 🔹 กำหนดเงื่อนไขการรัน: เมื่อมีการ push หรือ pull request ไปยัง branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # -------------------- 🔹 JOB 1: CI Checks --------------------
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          pip install flake8 pytest pandas

      - name: Lint with flake8
        run: |
          flake8 mlops_pipeline/scripts --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 mlops_pipeline/scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pytest || (if [ $? -eq 5 ]; then echo "Pytest finished: No tests found."; exit 0; else exit $?; fi)

  # -------------------- 🔹 JOB 2: Build & Train --------------------
  build-and-train:
    needs: ci-checks
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          pip install kaggle

      # ✅ โหลด dataset จาก Kaggle ก่อนเริ่มรัน
      - name: Download Dataset from Kaggle
        env:
          KAGGLE_JSON: ${{ secrets.KAGGLE_JSON }}
        run: |
          echo "$KAGGLE_JSON" > kaggle.json
          mkdir -p ~/.kaggle
          mv kaggle.json ~/.kaggle/
          chmod 600 ~/.kaggle/kaggle.json

          echo "📥 Downloading Kaggle dataset..."
          mkdir -p mlops_pipeline/data
          kaggle datasets download -d ammaralfaifi/5class-weather-status-image-classification -p mlops_pipeline/data --unzip
          echo "✅ Dataset downloaded successfully."

      - name: Fix dataset folder structure
        run: |
          echo "🔧 Checking folder structure..."
          if [ -d "mlops_pipeline/data/data" ]; then
            echo "⚙️ Moving dataset up one level..."
            mv mlops_pipeline/data/data/* mlops_pipeline/data/
            rm -rf mlops_pipeline/data/data
          fi
          echo "✅ Dataset structure fixed."
          ls mlops_pipeline/data

      - name: Clean corrupted or invalid images
        run: |
          pip install pillow
          python - <<'EOF'
          from PIL import Image
          import os
          ALLOWED = ('.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp')
          data_dir = "mlops_pipeline/data"
          removed = 0
          for subdir, _, files in os.walk(data_dir):
              for f in files:
                  path = os.path.join(subdir, f)
                  if f.lower().endswith(ALLOWED):
                      try:
                          Image.open(path).verify()
                      except Exception:
                          os.remove(path)
                          removed += 1
          print(f"🧹 Removed {removed} corrupted images.")
          EOF
          
      # ✅ ขั้นตอน pipeline ปกติ
      - name: Run Data Validation
        run: python mlops_pipeline/scripts/01_data_validation.py

      - name: Run Data Preprocessing
        id: preprocessing
        run: python mlops_pipeline/scripts/02_preprocessing.py

      - name: Run Model Training, Evaluation, and Registration
        run: python mlops_pipeline/scripts/03_train_model.py

      - name: Transition Model to Staging
        if: success()
        run: python mlops_pipeline/scripts/04_evaluate_model.py "weather-classifier-prod" "Staging"

      - name: Upload MLflow artifacts for inspection
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts
          path: mlruns/
