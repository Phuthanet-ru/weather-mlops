# üîπ ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á Workflow
name: MLOps Pipeline CI/CT/CD

# üîπ Trigger: ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£ push ‡∏´‡∏£‡∏∑‡∏≠ pull request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # -------------------- üîπ JOB 1: CI Checks --------------------
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install CI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          pip install flake8 pytest

      - name: üîé Lint with flake8
        run: |
          flake8 deployment mlops_pipeline/scripts --count --show-source --statistics
          flake8 deployment mlops_pipeline/scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          echo "‚úÖ Flake8 check passed."

      - name: üß™ Test with pytest
        run: |
          pytest || (if [ $? -eq 5 ]; then echo "No tests found. Skipping."; exit 0; else exit $?; fi)
          echo "‚úÖ Unit tests passed."


  # -------------------- üîπ JOB 2: Train Models (CT) --------------------
  train-and-compare:
    needs: ci-checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        experiment:
          - lr: 0.001
            epochs: 10
            run_name: 'base-config'
          - lr: 0.0005
            epochs: 10
            run_name: 'low-lr'
          - lr: 0.001
            epochs: 20
            run_name: 'high-epochs'
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mlops_pipeline/requirements.txt
          pip install kaggle tensorflow mlflow pillow numpy

      - name: Download Dataset and Fix Structure
        env:
          KAGGLE_JSON: ${{ secrets.KAGGLE_JSON }}
        run: |
          echo "$KAGGLE_JSON" > kaggle.json
          mkdir -p ~/.kaggle
          mv kaggle.json ~/.kaggle/
          chmod 600 ~/.kaggle/kaggle.json
          mkdir -p mlops_pipeline/data
          kaggle datasets download -d ammaralfaifi/5class-weather-status-image-classification -p mlops_pipeline/data --unzip
          if [ -d "mlops_pipeline/data/data" ]; then
            mv mlops_pipeline/data/data/* mlops_pipeline/data/
            rm -rf mlops_pipeline/data/data
          fi
          echo "‚úÖ Dataset prepared."

      - name: Create safe temporary directory
        run: |
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ TMPDIR
          mkdir -p ${{ github.workspace }}/tmp
          echo "‚úÖ Created safe temporary directory for MLflow artifacts."

      - name: üí£ Force cleanup of non-image files via Shell
        run: |
          DATA_PATH="mlops_pipeline/data"
          echo "üîé Forcing cleanup of non-image files in ${DATA_PATH}..."

          # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà TensorFlow ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 
          # ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          find ${DATA_PATH} -type f \
              ! -name "*.jpg" \
              ! -name "*.jpeg" \
              ! -name "*.png" \
              ! -name "*.gif" \
              ! -name "*.bmp" \
              ! -name "*.webp" \
              ! -name "*." \
              -delete

          echo "‚úÖ Aggressive file cleanup completed. Any remaining files are either corrupt images or files without common extensions."

      - name: üîç Check and remove corrupted images
        run: |
          python mlops_pipeline/scripts/find_corrupted.py
          echo "‚úÖ Corrupted image check completed."
  
      - name: "Run Model Training (Exp: ${{ matrix.experiment.run_name }})"
        env:
            # üö® ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ò‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Python/MLflow/OS
          TMPDIR: ${{ github.workspace }}/tmp
          TEMP: ${{ github.workspace }}/tmp
          MP: ${{ github.workspace }}/tmp
        run: |
          # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà mkdir -p ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏≠)
          mkdir -p ${{ github.workspace }}/tmp
          echo "‚úÖ Created safe temporary directory: ${{ github.workspace }}/tmp"
  
          # 2. ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô
          echo "üöÄ Running Exp: LR=${{ matrix.experiment.lr }}, Epochs=${{ matrix.experiment.epochs }}"
          python mlops_pipeline/scripts/03_train_model.py \
              --lr ${{ matrix.experiment.lr }} \
              --epochs ${{ matrix.experiment.epochs }}

      - name: Inspect dataset (for debugging)
        run: |
          echo "üìÅ Dataset files preview:"
          find mlops_pipeline/data -type f | head -20

      - name: Upload MLflow Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mlflow-artifacts-${{ matrix.experiment.run_name }}
          path: mlruns/


  # -------------------- üîπ JOB 3: Deploy and Test (CD) --------------------
  deploy-and-test:
    needs: train-and-compare
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install mlflow pillow

      - name: Download MLflow artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Consolidate MLflow artifacts
        run: |
          # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
          mkdir -p mlruns
          
          # 2. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Artifacts ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
          for dir in mlflow-artifacts-*; do
            echo "Consolidating artifacts from $dir"
            # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå artifact (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∑‡∏≠ EXP_ID) 
            # ‡πÑ‡∏õ‡∏¢‡∏±‡∏á mlruns/
            # ‡πÉ‡∏ä‡πâ find ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå EXP_ID ‡πÅ‡∏•‡∏∞ RUN_ID
            find "$dir" -maxdepth 1 -mindepth 1 -type d -exec cp -r {} mlruns/ \;
          done
          echo "‚úÖ Consolidated mlruns directory."
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå MLmodel ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          find mlruns -type f -name "MLmodel" | head -10

      - name: Copy latest model for deployment
        run: |
          echo "üì¶ Searching for trained model..."
          # 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå MLmodel ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          MODEL_FILES=$(find mlruns -type f -name "MLmodel")

          if [ -z "$MODEL_FILES" ]; then
            echo "‚ùå No MLmodel file found within mlruns/ directory structure."
            exit 1
          fi

          # 2. ‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ find ‡πÅ‡∏•‡∏∞ sort ‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤)
          # ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ ls -td (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤) ‡∏ö‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå MLmodel
          LATEST_MODEL_DIR=$(echo "$MODEL_FILES" | xargs dirname | xargs ls -td | head -1)

          if [ -z "$LATEST_MODEL_DIR" ]; then
            echo "‚ùå Failed to determine the latest model directory."
            exit 1
          fi

          # 3. ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
          mkdir -p model
          cp -r "$LATEST_MODEL_DIR"/* model/
          echo "‚úÖ Copied model from $LATEST_MODEL_DIR"
          ls -R model

      - name: Build Docker Image
        run: docker build -t weather-mlops-api .

      - name: Run Docker Container
        run: |
          docker run -d -p 8001:8000 --name weather_api weather-mlops-api
          echo "‚è≥ Waiting for container (20s)..."
          sleep 20
          docker ps

      - name: Test API Prediction
        run: |
          IMAGE_PATH="test_assets/1440909480.jpg"
          echo "üß™ Testing API Prediction..."
          curl --fail --retry 5 --retry-delay 5 http://127.0.0.1:8001/
          curl -X POST -F "file=@${IMAGE_PATH}" http://127.0.0.1:8001/predict --fail
          echo "‚úÖ API test passed."

      - name: Stop and Remove Docker Container
        if: always()
        run: |
          docker stop weather_api || true
          docker rm weather_api || true
          echo "üßπ Cleaned up container"
